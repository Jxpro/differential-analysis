class DESDiff:
    def __init__(self):
        self.Sbox = [
            [0xe, 0x4, 0xd, 0x1, 0x2, 0xf, 0xb, 0x8, 0x3, 0xa, 0x6, 0xc, 0x5, 0x9, 0x0, 0x7,
             0x0, 0xf, 0x7, 0x4, 0xe, 0x2, 0xd, 0x1, 0xa, 0x6, 0xc, 0xb, 0x9, 0x5, 0x3, 0x8,
             0x4, 0x1, 0xe, 0x8, 0xd, 0x6, 0x2, 0xb, 0xf, 0xc, 0x9, 0x7, 0x3, 0xa, 0x5, 0x0,
             0xf, 0xc, 0x8, 0x2, 0x4, 0x9, 0x1, 0x7, 0x5, 0xb, 0x3, 0xe, 0xa, 0x0, 0x6, 0xd],
            [0xf, 0x1, 0x8, 0xe, 0x6, 0xb, 0x3, 0x4, 0x9, 0x7, 0x2, 0xd, 0xc, 0x0, 0x5, 0xa,
             0x3, 0xd, 0x4, 0x7, 0xf, 0x2, 0x8, 0xe, 0xc, 0x0, 0x1, 0xa, 0x6, 0x9, 0xb, 0x5,
             0x0, 0xe, 0x7, 0xb, 0xa, 0x4, 0xd, 0x1, 0x5, 0x8, 0xc, 0x6, 0x9, 0x3, 0x2, 0xf,
             0xd, 0x8, 0xa, 0x1, 0x3, 0xf, 0x4, 0x2, 0xb, 0x6, 0x7, 0xc, 0x0, 0x5, 0xe, 0x9],
            [0xa, 0x0, 0x9, 0xe, 0x6, 0x3, 0xf, 0x5, 0x1, 0xd, 0xc, 0x7, 0xb, 0x4, 0x2, 0x8,
             0xd, 0x7, 0x0, 0x9, 0x3, 0x4, 0x6, 0xa, 0x2, 0x8, 0x5, 0xe, 0xc, 0xb, 0xf, 0x1,
             0xd, 0x6, 0x4, 0x9, 0x8, 0xf, 0x3, 0x0, 0xb, 0x1, 0x2, 0xc, 0x5, 0xa, 0xe, 0x7,
             0x1, 0xa, 0xd, 0x0, 0x6, 0x9, 0x8, 0x7, 0x4, 0xf, 0xe, 0x3, 0xb, 0x5, 0x2, 0xc],
            [0x7, 0xd, 0xe, 0x3, 0x0, 0x6, 0x9, 0xa, 0x1, 0x2, 0x8, 0x5, 0xb, 0xc, 0x4, 0xf,
             0xd, 0x8, 0xb, 0x5, 0x6, 0xf, 0x0, 0x3, 0x4, 0x7, 0x2, 0xc, 0x1, 0xa, 0xe, 0x9,
             0xa, 0x6, 0x9, 0x0, 0xc, 0xb, 0x7, 0xd, 0xf, 0x1, 0x3, 0xe, 0x5, 0x2, 0x8, 0x4,
             0x3, 0xf, 0x0, 0x6, 0xa, 0x1, 0xd, 0x8, 0x9, 0x4, 0x5, 0xb, 0xc, 0x7, 0x2, 0xe],
            [0x2, 0xc, 0x4, 0x1, 0x7, 0xa, 0xb, 0x6, 0x8, 0x5, 0x3, 0xf, 0xd, 0x0, 0xe, 0x9,
             0xe, 0xb, 0x2, 0xc, 0x4, 0x7, 0xd, 0x1, 0x5, 0x0, 0xf, 0xa, 0x3, 0x9, 0x8, 0x6,
             0x4, 0x2, 0x1, 0xb, 0xa, 0xd, 0x7, 0x8, 0xf, 0x9, 0xc, 0x5, 0x6, 0x3, 0x0, 0xe,
             0xb, 0x8, 0xc, 0x7, 0x1, 0xe, 0x2, 0xd, 0x6, 0xf, 0x0, 0x9, 0xa, 0x4, 0x5, 0x3],
            [0xc, 0x1, 0xa, 0xf, 0x9, 0x2, 0x6, 0x8, 0x0, 0xd, 0x3, 0x4, 0xe, 0x7, 0x5, 0xb,
             0xa, 0xf, 0x4, 0x2, 0x7, 0xc, 0x9, 0x5, 0x6, 0x1, 0xd, 0xe, 0x0, 0xb, 0x3, 0x8,
             0x9, 0xe, 0xf, 0x5, 0x2, 0x8, 0xc, 0x3, 0x7, 0x0, 0x4, 0xa, 0x1, 0xd, 0xb, 0x6,
             0x4, 0x3, 0x2, 0xc, 0x9, 0x5, 0xf, 0xa, 0xb, 0xe, 0x1, 0x7, 0x6, 0x0, 0x8, 0xd],
            [0x4, 0xb, 0x2, 0xe, 0xf, 0x0, 0x8, 0xd, 0x3, 0xc, 0x9, 0x7, 0x5, 0xa, 0x6, 0x1,
             0xd, 0x0, 0xb, 0x7, 0x4, 0x9, 0x1, 0xa, 0xe, 0x3, 0x5, 0xc, 0x2, 0xf, 0x8, 0x6,
             0x1, 0x4, 0xb, 0xd, 0xc, 0x3, 0x7, 0xe, 0xa, 0xf, 0x6, 0x8, 0x0, 0x5, 0x9, 0x2,
             0x6, 0xb, 0xd, 0x8, 0x1, 0x4, 0xa, 0x7, 0x9, 0x5, 0x0, 0xf, 0xe, 0x2, 0x3, 0xc],
            [0xd, 0x2, 0x8, 0x4, 0x6, 0xf, 0xb, 0x1, 0xa, 0x9, 0x3, 0xe, 0x5, 0x0, 0xc, 0x7,
             0x1, 0xf, 0xd, 0x8, 0xa, 0x3, 0x7, 0x4, 0xc, 0x5, 0x6, 0xb, 0x0, 0xe, 0x9, 0x2,
             0x7, 0xb, 0x4, 0x1, 0x9, 0xc, 0xe, 0x2, 0x0, 0x6, 0xa, 0xd, 0xf, 0x3, 0x5, 0x8,
             0x2, 0x1, 0xe, 0x7, 0x4, 0xa, 0x8, 0xd, 0xf, 0xc, 0x9, 0x0, 0x3, 0x5, 0x6, 0xb]
        ]

    def sub_bytes(self, input_bits, s_index):
        """计算输入值通过 DES S-box 后的输出值

        :param input_bits: 输入的值
        :param s_index: S-box 的索引
        :return: S-box 代换后的值
        """
        row = (input_bits >> 5) * 2 + (input_bits & 0b1)
        column = (input_bits & 0b011110) >> 1
        return self.Sbox[s_index][row * 16 + column]

    def single_distribution(self, s_index):
        """计算 DES 单个 S-box 的差分分布表

        :param s_index: S-box 的索引
        :return: 差分分布表
        """
        result = [[0] * 16 for _ in range(64)]
        for input_xor in range(64):
            for input_pair1 in range(64):
                input_pair2 = input_pair1 ^ input_xor
                output_pair1 = self.sub_bytes(input_pair1, s_index)
                output_pair2 = self.sub_bytes(input_pair2, s_index)
                output_xor = output_pair1 ^ output_pair2
                result[input_xor][output_xor] += 1
        return result

    def all_distribution(self):
        """计算 DES 所有 S-box 的差分分布表"""
        s_boxes = {}
        for s_box in range(8):
            s_boxes.update({'s%d' % (s_box + 1): self.single_distribution(s_box)})
        return s_boxes

    def max_diff_value(self):
        """计算 DES 每一个 S-box 的最大值，及其输入和输的出差分值

        :return 由元祖构成的列表，其中每个元祖依次包含最大值，输入和输出的差分值
        """
        max_value = []
        for s, v in self.all_distribution().items():
            v.pop(0)
            plain = [i for j in v for i in j]
            m_value = max(plain)
            row = plain.index(m_value) // 16
            col = plain.index(m_value) % 16
            max_value.append((m_value, row + 1, col))
        return max_value

    def possible_values(self, input_xor, output_xor, s_index):
        """计算给定输入和输出差分，给定 DES S-box 下，可能的输入值

        :param input_xor: 输入差分值
        :param output_xor: 输出差分值
        :param s_index: S-box 索引
        :return: 可能的输入值
        """
        possible_values = []
        for input_pair1 in range(64):
            input_pair2 = input_pair1 ^ input_xor
            output_pair1 = self.sub_bytes(input_pair1, s_index)
            output_pair2 = self.sub_bytes(input_pair2, s_index)
            xor = output_pair1 ^ output_pair2
            if xor == output_xor:
                possible_values.append(input_pair1)
        return possible_values

    def save_distribution_to_file(self, path):
        """将差分分布表保存到指定路径"""
        with open(path, 'w') as f:
            for key, values in self.all_distribution().items():
                f.write(key + ':\n')
                for index, value in enumerate(values):
                    f.write("%#04x" % index + ": " + str(value) + '\n')
                f.write('\n')

    def print_distribution(self):
        """打印差分分布表"""
        for key, values in self.all_distribution().items():
            print(key + ':')
            for value in values:
                print(value)
            print('')


if __name__ == '__main__':
    des = DESDiff()

    print('distribution:')
    des.print_distribution()

    # des.save_distribution_to_file('data/distribution_des.txt')

    print('max diff value and location:')
    print(des.max_diff_value())

    for index, item in enumerate(des.max_diff_value()):
        print(f'\npossible input values of {item[1]} -> {item[2]}:')
        print([hex(x) for x in des.possible_values(item[1], item[2], index)])
